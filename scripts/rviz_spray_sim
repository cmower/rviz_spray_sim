#!/usr/bin/env python
import rospy
import numpy as np
from copy import deepcopy
from visualization_msgs.msg import Marker, MarkerArray

def init_marker(fr):
    marker = Marker()
    marker.header.frame_id = fr
    marker.header.stamp = rospy.Time.now()
    marker.action = 0
    marker.pose.orientation.w = 1
    return marker

class Particle(object):

    def __init__(self, speed, cone_theta):
        self.dt = 1.0/50.0
        self.speed = speed
        self.r = self.t = self.x = self.y = self.z = 0.0
        theta = np.random.uniform(0, cone_theta)
        phi = np.random.uniform(0, 2.0*np.pi)
        self.A = np.sin(theta)*np.cos(phi)
        self.B = np.sin(theta)*np.sin(phi)
        self.C = np.cos(theta)

    def update(self):
        self.t += self.dt
        self.r = self.speed * self.t 
        self.x = self.r*self.A
        self.y = self.r*self.B
        self.z = self.r*self.C
    
class SpraySim(object):

    def __init__(self):

        # Init params, particle list, and ros pub
        self.particle_radius =  rospy.get_param('~particle_radius')
        self.cone_theta = rospy.get_param('~cone_theta') 
        self.cone_radius = rospy.get_param('~cone_radius') 
        self.frame = rospy.get_param('~frame') 
        self.spawn_rate = rospy.get_param('~spawn_rate') 
        self.particle_speed = rospy.get_param('~particle_speed') 
        self.particles = []
        self.particle_pub = rospy.Publisher('spray', MarkerArray, queue_size=1)

        # Set ros timers
        rospy.Timer(rospy.Duration(1.0/50.0), self.publish_particles)
        rospy.Timer(rospy.Duration(1.0/self.spawn_rate), self.spawn_new_particles)
        rospy.Timer(rospy.Duration(1.0/50.0), self.destroy_particles)
        rospy.Timer(rospy.Duration(1.0/50.0), self.update_particles)

        # If user wants also publish cone marker
        if rospy.has_param('~publish_cone_marker'):
            pub_cone = rospy.get_param('~publish_cone_marker')
        else:
            pub_cone = False
        if pub_cone:
            self.cone_pub = rospy.Publisher('cone', Marker, queue_size=1)
            rospy.Timer(rospy.Duration(1.0/50.0), self.publish_cone)
            
    def spawn_new_particles(self, event):
        self.particles.append(Particle(self.particle_speed, self.cone_theta))

    def destroy_particles(self, event):
        self.particles = [p for p in self.particles if p.r < self.cone_radius]

    def update_particles(self, event):
        for p in self.particles: p.update()

    def publish_particles(self, event):
        markerarray = MarkerArray()
        for i, p in enumerate(deepcopy(self.particles)):
            marker = init_marker(self.frame)
            marker.type=2
            marker.id = i
            marker.pose.position.x = p.x
            marker.pose.position.y = p.y
            marker.pose.position.z = p.z
            marker.scale.x = marker.scale.y = marker.scale.z = self.particle_radius
            marker.color.a = 1.0
            marker.color.r = 210.0 / 255.0
            marker.color.g = 105.0 / 255.0
            marker.color.b = 30.0 / 255.0
            markerarray.markers.append(marker)
        self.particle_pub.publish(markerarray)

    def publish_cone(self, event):
        marker = init_marker(self.frame)
        marker.type = 10
        marker.id = 0
        marker.scale.x = marker.scale.y = marker.scale.z = 0.5
        marker.color.a = 0.5
        marker.color.r = 1.0
        marker.mesh_resource = "package://rviz_spray_sim/resources/cone.stl"
        self.cone_pub.publish(marker)

if __name__=='__main__':
    rospy.init_node('rviz_spray_sim_node')
    SpraySim()
    rospy.spin()
